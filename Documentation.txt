Documentation for the project:

Il codice del progetto si trova nella cartella (\src\main\java\sistemidistribuiti\uno).
Qui troviamo i seguenti elementi:
- bean
- exception
- listener
- model
- rmi
- utils
- view
- workflow
- App.java (entry point)

********
**Bean**
********
Nella cartella bean torviamo il file ConfigBean. Il file ConfigBean si occupa
dei settaggi di configurazione
*************
**Exception**
*************
Nella cartella Exception torviamo l'eccezione NextPlayerNotFoundException. La quale
viene invocata nel momento in cui il nodo successivo incaricato di procedere nel gioco
non è raggiungibile.
*************
**Listener***
*************
Nella cartella Listener troviamo DataReceiverListener, che non è altri che il Listener
utilizzato per le callback di RMI.
*************
****Model****
*************
All'interno della cartella model abbiamo le seguenti sottocartelle
- Card
- Game
- Player
      *************
      ****Card*****
      *************
      Card al suo interno contiene 3 classi:
      - CARD_COLOR
      - CARD_TYPE_ENUM
      - SPECIAL_CARD_TYPE
      Queste 3 classi sono necessarie al fine di arricchire l'oggetto UnoCard fornendo
      informazioni aggiuntive riguardo: al colore, al tipo di carta (numero o speciale), e
      se speciale al tipo di carta speciale che questa è.
      UnoCard invece è la classe che definisce l'oggetto carta da UNO caratterizzata dagli attributi:
      - Color (CARD_COLOR)
      - Image (byte, questo attributo dovrà contenere l'immagine della carta da uno che identifica l'oggetto)
      - CardType (CARD_TYPE_ENUM).
      Sempre all'interno della cartella Card abbiamo la cartella Impl. Questa cartella contiene:
      - Deck, la quale identifica l'oggetto mazzo
      - NumberCard, è una sottoclasse di unoCard, la quale specializza UnoCard per le carte numeriche
      - SpecialCard, è una sottoclasse di unoCard, la quale specializza UnoCard per le carte speciali
      *************
      ****Game*****
      *************
      Game al suo interno contiene 2 classi:
      - Direction
      - Game
      Direction: tale classe serve per definire il tipo di direzione del gioco la quale può essere
      invertita dalla carta speciale reverseDirection.
      La classe Game invece è un oggetto (una sorta di token) che viene passato di giocatore in giocatore.
      E al suo interno contiene dei metodi che modificano lo stato del gioco in base alle azioni che effettuano i vari
      utenti.
      ***************
      *****Player****
      ***************
      Game al suo interno contiene 2 classi:
      - Direction
      - Game
      Direction: tale classe serve per definire il tipo di direzione del gioco la quale può essere
      invertita dalla carta speciale reverseDirection.
      La classe Game invece è un oggetto (una sorta di token) che viene passato di giocatore in giocatore.
      E al suo interno contiene dei metodi che modificano lo stato del gioco in base alle azioni che effettuano i vari
      utenti.
